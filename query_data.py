import argparse
import os
from langchain_chroma import Chroma
from langchain.prompts import ChatPromptTemplate
from langchain_community.llms.ollama import Ollama
from embedding_functiom import embedding_function  # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –º–æ–¥—É–ª—è!

CHROMA_PATH = "chroma_db"

# PROMPT_TEMPLATE = """
# –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç:

# {context}

# –í–æ–ø—Ä–æ—Å: {question}
# """

PROMPT_TEMPLATE = """
–í—ã—Å—Ç—É–ø–∏—Ç–µ –≤ —Ä–æ–ª–∏ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–æ–≤.

–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ò–°–¢–ò–ù–ù–´–ú, –õ–û–ñ–ù–´–ú –∏–ª–∏ –ù–ï–ò–ó–í–ï–°–¢–ù–´–ú (–µ—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏). –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç–µ –≤–∞—à –≤—ã–≤–æ–¥, —Å—Å—ã–ª–∞—è—Å—å –Ω–∞ —Ñ–∞–∫—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
{context}

–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {question}

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
- –ú–µ—Ç–∫–∞: –ò–°–¢–ò–ù–ù–û / –õ–û–ñ–ù–û / –ù–ï–ò–ó–í–ï–°–¢–ù–û
- –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

–û—Ç–≤–µ—Ç:
"""



def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("query_text", type=str, help="–í–æ–ø—Ä–æ—Å –¥–ª—è RAG.")
    args = parser.parse_args()
    query_rag(args.query_text)

def query_rag(query_text: str):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î —Å —É–∫–∞–∑–∞–Ω–∏–µ–º collection_name
    db = Chroma(
        collection_name="meds",
        persist_directory=CHROMA_PATH,
        embedding_function=embedding_function()
    )

    print(f"üîç –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {db._collection.count()}")

    print("üîé –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –ø–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ...")
    results = db.similarity_search_with_score(query_text, k=10)

    print(f"\nüìÑ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n")
    for i, (doc, score) in enumerate(results):
        print(f"üîπ –î–æ–∫—É–º–µ–Ω—Ç {i+1} | –ù–∞–∑–≤–∞–Ω–∏–µ: {doc.metadata.get('—Ç–æ—Ä–≥–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} | Score: {score:.4f}")
        print(doc.page_content[:300])
        print("------")

    if not results:
        print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
    context_text = "\n\n---\n\n".join([doc.page_content for doc, _ in results])
    prompt_template = ChatPromptTemplate.from_template(PROMPT_TEMPLATE)
    prompt = prompt_template.format(context=context_text, question=query_text)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å Ollama
    model = Ollama(model="gemma3:4b",temperature=0)
    response_text = model.invoke(prompt)

    # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    sources = [doc.metadata.get("—Ç–æ—Ä–≥–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") for doc, _ in results]
    print(f"\nüß† –û—Ç–≤–µ—Ç:\n{response_text}")
    print(f"\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {sources}")

    return response_text

if __name__ == "__main__":
    # –í—ã–≤–æ–¥–∏–º —Ñ–∞–π–ª—ã –±–∞–∑—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    if os.path.exists(CHROMA_PATH):
        print("–§–∞–π–ª—ã –≤ chroma_db –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")
        print(os.listdir(CHROMA_PATH))
    else:
        print(f"–ü–∞–ø–∫–∞ {CHROMA_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ –ø—Ä–∏–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
    emb = embedding_function()
    vec = emb.embed_query("–∞–º–ø–∏—Ü–∏–ª–ª–∏–Ω –Ω–∞—Ç—Ä–∏–µ–≤–∞—è —Å–æ–ª—å")
    print(f"–†–∞–∑–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {len(vec)}")
    print(f"–ü—Ä–∏–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ (–ø–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π): {vec[:5]}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ
    vectordb = Chroma(
        collection_name="meds",
        embedding_function=embedding_function(),
        persist_directory=CHROMA_PATH,
    )
    print(f"–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {vectordb._collection.count()}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    main()
