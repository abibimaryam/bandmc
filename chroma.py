import os
import shutil
import pandas as pd
from langchain_community.vectorstores import Chroma  # ‚Üê –ï—Å–ª–∏ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å: –∑–∞–º–µ–Ω–∏ –Ω–∞ `from langchain_chroma import Chroma`
from langchain.schema import Document
from embedding_functiom import embedding_function
from config import DATA_DIR, CHROMA_PATH


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
embedding_func = embedding_function()


def parse_lekarstva(df: pd.DataFrame, file: str) -> list[Document]:
    docs = []
    for idx, row in df.iterrows():
        try:
            content = "\n".join([f"{col}: {row[col]}" for col in df.columns])
            metadata = {
                "—Ç–∏–ø": "–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã",
                "—Ç–æ—Ä–≥–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ": row.get("–¢–æ—Ä–≥–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–∏–Ω–æ–Ω–∏–º", ""),
                "–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ": row.get("–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", ""),
                "–ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è_—Ñ–æ—Ä–º–∞": row.get("–õ–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –≤—ã–ø—É—Å–∫–∞", ""),
                "—Å—Ç—Ä–∞–Ω–∞_–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å": row.get("–°—Ç—Ä–∞–Ω–∞-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å", ""),
                "—Ñ–∏—Ä–º–∞_–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å": row.get("–§–∏—Ä–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å", ""),
                "—Ñ–∞—Ä–º–∞–∫–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∞—è_–≥—Ä—É–ø–ø–∞": row.get("–§–∞—Ä–º–∞–∫–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∞", ""),
                "—Ñ–∞–π–ª": file
            }
            doc = Document(page_content=content, metadata=metadata)
            docs.append(doc)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {idx} –≤ {file}: {e}")
    return docs

def parse_bads(df: pd.DataFrame, file: str) -> list[Document]:
    docs = []
    for idx, row in df.iterrows():
        try:
            content = "\n".join([f"{col}: {row[col]}" for col in df.columns])
            metadata = {
                "—Ç–∏–ø": "–±–∞–¥",
                "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ë–ê–î–æ–≤", ""),
                "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è": row.get("–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏", ""),
                "—Ñ–∞–π–ª": file
            }
            doc = Document(page_content=content, metadata=metadata)
            docs.append(doc)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {idx} –≤ {file}: {e}")
    return docs


def load_all_documents(data_dir: str) -> list[Document]:
    excel_files = [f for f in os.listdir(data_dir) if f.endswith(".xlsx")]
    docs = []

    for file in excel_files:
        path = os.path.join(data_dir, file)

        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
            skip = 1 if "–ª–µ–∫" in file.lower() else 0
            df = pd.read_excel(path, skiprows=skip)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file}: {e}")
            continue

        df = df.fillna("")
        df.columns = [' '.join(str(col).strip().split()) for col in df.columns]

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∞–π–ª–∞
        if "–ª–µ–∫" in file.lower():
            parsed_docs = parse_lekarstva(df, file)
        elif "–±–∞–¥" in file.lower():
            parsed_docs = parse_bads(df, file)
        else:
            print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file}")
            parsed_docs = []

        docs.extend(parsed_docs)

    return docs



def reset_chroma():
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—É—é –±–∞–∑—É –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç –µ—ë —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    if os.path.exists(CHROMA_PATH):
        print("‚ôªÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã Chroma...")
        shutil.rmtree(CHROMA_PATH)

    print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    docs = load_all_documents(DATA_DIR)
    print(f"üìÑ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(docs)}")

    vectordb = Chroma(
        collection_name="meds",
        embedding_function=embedding_func,
        persist_directory=CHROMA_PATH,
    )

    batch_size = 5000
    for i in range(0, len(docs), batch_size):
        batch = docs[i:i + batch_size]
        vectordb.add_documents(batch)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {i + len(batch)} / {len(docs)}")

    vectordb.persist()
    print(f"üì¶ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞: {vectordb._collection.count()}")


def update_chroma():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é ChromaDB."""
    print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    docs = load_all_documents(DATA_DIR)
    print(f"üìÑ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(docs)}")

    vectordb = Chroma(
        collection_name="meds",
        embedding_function=embedding_func,
        persist_directory=CHROMA_PATH,
    )

    batch_size = 5000
    for i in range(0, len(docs), batch_size):
        batch = docs[i:i + batch_size]
        vectordb.add_documents(batch)
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {i + len(batch)} / {len(docs)}")

    vectordb.persist()
    print(f"üì¶ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {vectordb._collection.count()}")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
if __name__ == "__main__":
    # reset_chroma()  # –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–Ω–æ–≤–æ
    # update_chroma()  # –ß—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã
    pass