import os
from langchain_chroma import Chroma
from langchain.prompts import ChatPromptTemplate
from langchain_community.llms.ollama import Ollama
from embedding_functiom import embedding_function
from config import CHROMA_PATH,model



CHROMA_PATH = "chroma_db"

PROMPT_TEMPLATE = """
–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç:

{context}

–í–æ–ø—Ä–æ—Å: {question}
"""

def query_rag(query_text: str):
    db = Chroma(
        collection_name="meds",
        persist_directory=CHROMA_PATH,
        embedding_function=embedding_function()
    )

    print(f"üîç –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {db._collection.count()}")
    print("üîé –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –ø–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ...")
    results = db.similarity_search_with_score(query_text, k=10)

    print(f"\nüìÑ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n")
    for i, (doc, score) in enumerate(results):
        print(f"üîπ –î–æ–∫—É–º–µ–Ω—Ç {i+1} | –ù–∞–∑–≤–∞–Ω–∏–µ: {doc.metadata.get('—Ç–æ—Ä–≥–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} | Score: {score:.4f}")
        print(doc.page_content[:300])
        print("------")

    if not results:
        print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    context_text = "\n\n---\n\n".join([doc.page_content for doc, _ in results])
    prompt_template = ChatPromptTemplate.from_template(PROMPT_TEMPLATE)
    prompt = prompt_template.format(context=context_text, question=query_text)

    response_text = model.invoke(prompt)

    sources = [doc.metadata.get("—Ç–æ—Ä–≥–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") for doc, _ in results]
    print(f"\nüß† –û—Ç–≤–µ—Ç:\n{response_text}")
    print(f"\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {sources}")

    return response_text


def run_rag():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∞–∑—ã
    if os.path.exists(CHROMA_PATH):
        print("üìÅ –§–∞–π–ª—ã –≤ chroma_db:")
        print(os.listdir(CHROMA_PATH))
    else:
        print(f"‚ùó –ü–∞–ø–∫–∞ {CHROMA_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")


    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    vectordb = Chroma(
        collection_name="meds",
        embedding_function=embedding_function(),
        persist_directory=CHROMA_PATH,
    )
    print(f"üìä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {vectordb._collection.count()}")

    # –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query_text = input("\n‚ùì –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å: ")
    query_rag(query_text)


if __name__ == "__main__":
    run_rag()


# CHROMA_PATH = CHROMA_PATH

# PROMPT_TEMPLATE = """
# –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç:

# {context}

# –í–æ–ø—Ä–æ—Å: {question}
# """

# def query_tool(query_text: str) -> str:
#     db = Chroma(
#         collection_name="meds",
#         persist_directory=CHROMA_PATH,
#         embedding_function=embedding_function()
#     )

#     results = db.similarity_search_with_score(query_text, k=10)

#     if not results:
#         return "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

#     # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
#     context_text = "\n\n---\n\n".join([doc.page_content for doc, _ in results])
#     prompt_template = ChatPromptTemplate.from_template(PROMPT_TEMPLATE)
#     prompt = prompt_template.format(context=context_text, question=query_text)

#     # LLM
#     response_text = model.invoke(prompt)

#     # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
#     sources = [doc.metadata.get("—Ç–æ—Ä–≥–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") for doc, _ in results]
#     source_text = ", ".join(sources)

#     return f"üß† –û—Ç–≤–µ—Ç:\n{response_text}\n\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {source_text}"


# from llama_index.core.agent.workflow import AgentWorkflow
# import asyncio


# check_agent = AgentWorkflow.from_tools_or_functions(
#         tools_or_functions=[query_tool],
#         llm=model,
#         system_prompt = """
#         –¢—ã ‚Äî –ò–ò-–∞–≥–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–æ–≤. 
#         –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä—è—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—á–µ—Ä–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç query_tool).

#         –í–æ—Ç –∫–∞–∫ —Ç—ã –¥–µ–π—Å—Ç–≤—É–µ—à—å:
#         1. –ü–æ–ª—É—á–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
#         2. –° –ø–æ–º–æ—â—å—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ `query_tool` –Ω–∞–π–¥–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
#         3. –°—Ä–∞–≤–Ω–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.
#         4. –°–∫–∞–∂–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:
#         - –ò–°–¢–ò–ù–ù–´–ú ‚Äî –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä—è–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –µ–≥–æ;
#         - –õ–û–ñ–ù–´–ú ‚Äî –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —è–≤–Ω–æ –µ–º—É –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç;
#         - –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –î–ê–ù–ù–´–• ‚Äî –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞.

#         –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
#         –†–µ–∑—É–ª—å—Ç–∞—Ç: [–ò–°–¢–ò–ù–ê / –õ–û–ñ–¨ / –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –î–ê–ù–ù–´–•]  
#         –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ø–æ—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞]

#         –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ —ç—Ç–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É.
#         """

#     )

# # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
# async def check_statement(statement: str):
#     """
#     –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∞–≥–µ–Ω—Ç–∞.
#     """
#     result = await check_agent.run(statement)
#     return result

# # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# if __name__ == "__main__":
#     statement = input("–í–≤–µ–¥–∏—Ç–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: ")
#     response = asyncio.run(check_statement(statement))
#     print(response)