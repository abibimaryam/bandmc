# import os
# from langchain_chroma import Chroma
# from langchain.prompts import ChatPromptTemplate
# from langchain_community.llms.ollama import Ollama
# from embedding_functiom import embedding_function
# from config import CHROMA_PATH, model

# # –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π (—Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è)
# PROMPT_TEMPLATE = """
# –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥—ë–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:

# {context}

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞–ª —Å–ª–µ–¥—É—é—â–µ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:

# {question}

# –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏ –Ω–∞–π–¥–∏ –í–°–ï –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

# –í—ã–≤–µ–¥–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö –ø—É–Ω–∫—Ç–æ–≤, –≥–¥–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ù–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ –¥–∞–Ω–Ω—ã–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —Å –∫—Ä–∞—Ç–∫–∏–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º.

# –ï—Å–ª–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –Ω–µ—Ç, –æ—Ç–≤–µ—Ç—å "–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
# """

# def extract_key_entities(user_input: str) -> str:
#     prompt = f"""
# –ò–∑–≤–ª–µ–∫–∏ –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, —Ç–∞–∫–∏–µ –∫–∞–∫:

# - —Ç–æ—Ä–≥–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞,
# - –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ –Ω–µ–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å),
# - —Ñ–æ—Ä–º–∞ –≤—ã–ø—É—Å–∫–∞,
# - –¥–æ–∑–∏—Ä–æ–≤–∫–∞,
# - —Å—Ç—Ä–∞–Ω–∞-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å,
# - —Ñ–∏—Ä–º–∞-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å,

# –í–µ—Ä–Ω–∏ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é ‚Äî –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–µ—Ä–Ω–∏ "None".

# –ó–∞–ø—Ä–æ—Å: "{user_input}"
# """
#     response = model.invoke(prompt).strip()
#     print(response)
#     return response if response.lower() != "none" else None


# def query_rag(user_input: str):
#     key_phrases = extract_key_entities(user_input)
#     if not key_phrases:
#         print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—â–∏–π –ø–æ–∏—Å–∫.")
#         query_text = user_input
#     else:
#         print(f"üß∑ –ò–∑–≤–ª–µ—á–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {key_phrases}")
#         query_text = key_phrases

#     db = Chroma(
#         collection_name="meds",
#         persist_directory=CHROMA_PATH,
#         embedding_function=embedding_function()
#     )

#     print(f"üîç –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {db._collection.count()}")
#     print("üîé –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –ø–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ...")
#     results = db.similarity_search_with_score(query_text, k=20)

#     if not results:
#         print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
#         return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

#     print(f"\nüìÑ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n")
#     for i, (doc, score) in enumerate(results):
#         print(f"üîπ –î–æ–∫—É–º–µ–Ω—Ç {i+1} | –ù–∞–∑–≤–∞–Ω–∏–µ: {doc.metadata.get('—Ç–æ—Ä–≥–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} | Score: {score:.4f}")
#         print(doc.page_content[:300])
#         print("------")

#     context_text = "\n\n---\n\n".join([doc.page_content for doc, _ in results])
#     prompt_template = ChatPromptTemplate.from_template(PROMPT_TEMPLATE)
#     prompt = prompt_template.format(context=context_text, question=user_input)

#     response_text = model.invoke(prompt).strip()

#     sources = [doc.metadata.get("—Ç–æ—Ä–≥–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") for doc, _ in results]
#     print(f"\nüß† –û—Ç–≤–µ—Ç —Å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è–º–∏:\n{response_text}")
#     print(f"\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {sources}")

#     return response_text


# def run_rag():
#     if os.path.exists(CHROMA_PATH):
#         print("üìÅ –§–∞–π–ª—ã –≤ chroma_db:")
#         print(os.listdir(CHROMA_PATH))
#     else:
#         print(f"‚ùó –ü–∞–ø–∫–∞ {CHROMA_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

#     vectordb = Chroma(
#         collection_name="meds",
#         embedding_function=embedding_function(),
#         persist_directory=CHROMA_PATH,
#     )
#     print(f"üìä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {vectordb._collection.count()}")

#     query_text = input("\n‚ùì –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: ")
#     query_rag(query_text)


# if __name__ == "__main__":
#     run_rag()


import os
from langchain_chroma import Chroma
from langchain.prompts import ChatPromptTemplate
from langchain_community.llms.ollama import Ollama
from embedding_functiom import embedding_function
from config import CHROMA_PATH, model
from duckduckgo_search import DDGS

# –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π (—Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è)
PROMPT_TEMPLATE = """
–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥—ë–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:

{context}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞–ª —Å–ª–µ–¥—É—é—â–µ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:

{question}

–í —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–∫–∞–∑–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {key_entities}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏ –Ω–∞–π–¥–∏ –í–°–ï –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—å, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –∏ —Å—Ç—Ä–∞–Ω–∞-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏.

–í—ã–≤–µ–¥–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö –ø—É–Ω–∫—Ç–æ–≤, –≥–¥–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ù–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ –¥–∞–Ω–Ω—ã–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —Å –∫—Ä–∞—Ç–∫–∏–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º.

–ï—Å–ª–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –Ω–µ—Ç, –æ—Ç–≤–µ—Ç—å "–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
"""

# –í–µ–±-–ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç DDGS, duckduckgo_search)

def search_tool(query: str) -> str:
        with DDGS() as ddgs:
            results = [r["body"] for r in ddgs.text(query, max_results=3)]
        return "\n\n".join(results)


def extract_key_entities(user_input: str) -> str:
    prompt = f"""
–ò–∑–≤–ª–µ–∫–∏ –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, —Ç–∞–∫–∏–µ –∫–∞–∫:

- —Ç–æ—Ä–≥–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞,
- –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ –Ω–µ–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å),


–í–µ—Ä–Ω–∏ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é ‚Äî –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–µ—Ä–Ω–∏ "None".

–ó–∞–ø—Ä–æ—Å: "{user_input}"
"""
    response = model.invoke(prompt).strip()
    print(f"üîë –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {response}")
    return response if response.lower() != "none" else None


def query_rag_with_web_search(user_input: str):
    key_phrases = extract_key_entities(user_input)
    if not key_phrases:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—â–∏–π –ø–æ–∏—Å–∫.")
        query_text = user_input
        filter_name = None
    else:
        print(f"üß∑ –ò–∑–≤–ª–µ—á–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {key_phrases}")
        query_text = key_phrases
        # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ ‚Äî –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
        filter_name = key_phrases.split(",")[0].strip().lower()

    # –ü–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    db = Chroma(
        collection_name="meds",
        persist_directory=CHROMA_PATH,
        embedding_function=embedding_function()
    )

    print(f"üîç –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {db._collection.count()}")
    print("üîé –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –ø–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ...")
    results = db.similarity_search_with_score(query_text, k=20)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
    if filter_name:
        filtered_results = []
        for doc, score in results:
            title = doc.metadata.get("—Ç–æ—Ä–≥–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ", "").lower()
            if filter_name in title:
                filtered_results.append((doc, score))
        results = filtered_results

    if not results:
        print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É.")
        local_context = ""
    else:
        print(f"\nüìÑ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É '{filter_name}':\n")
        for i, (doc, score) in enumerate(results):
            print(f"üîπ –î–æ–∫—É–º–µ–Ω—Ç {i+1} | –ù–∞–∑–≤–∞–Ω–∏–µ: {doc.metadata.get('—Ç–æ—Ä–≥–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} | Score: {score:.4f}")
            print(doc.page_content[:300])
            print("------")
        local_context = "\n\n---\n\n".join([doc.page_content for doc, _ in results])

    # –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
    print("üåê –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–µ–±-–ø–æ–∏—Å–∫...")
    web_results = search_tool(user_input)
    print(f"üåê –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):\n{web_results[:500]}...\n")

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
    combined_context = f"–õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:\n{local_context}\n\n–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–∞–Ω–Ω—ã–µ:\n{web_results}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    prompt_template = ChatPromptTemplate.from_template(PROMPT_TEMPLATE)
    prompt = prompt_template.format(context=combined_context, question=user_input, key_entities=key_phrases or "None")

    # –ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
    response_text = model.invoke(prompt).strip()

    sources = [doc.metadata.get("—Ç–æ—Ä–≥–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") for doc, _ in results] if results else []
    print(f"\nüß† –û—Ç–≤–µ—Ç —Å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è–º–∏:\n{response_text}")
    print(f"\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏: –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ - {sources}, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç - DuckDuckGo")

    return response_text



def run_rag():
    if os.path.exists(CHROMA_PATH):
        print("üìÅ –§–∞–π–ª—ã –≤ chroma_db:")
        print(os.listdir(CHROMA_PATH))
    else:
        print(f"‚ùó –ü–∞–ø–∫–∞ {CHROMA_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

    vectordb = Chroma(
        collection_name="meds",
        embedding_function=embedding_function(),
        persist_directory=CHROMA_PATH,
    )
    print(f"üìä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {vectordb._collection.count()}")

    query_text = input("\n‚ùì –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: ")
    query_rag_with_web_search(query_text)


if __name__ == "__main__":
    run_rag()
